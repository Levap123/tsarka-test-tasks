// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CounterRepoI is an autogenerated mock type for the CounterRepoI type
type CounterRepoI struct {
	mock.Mock
}

type CounterRepoI_Expecter struct {
	mock *mock.Mock
}

func (_m *CounterRepoI) EXPECT() *CounterRepoI_Expecter {
	return &CounterRepoI_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx
func (_m *CounterRepoI) Get(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CounterRepoI_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CounterRepoI_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *CounterRepoI_Expecter) Get(ctx interface{}) *CounterRepoI_Get_Call {
	return &CounterRepoI_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *CounterRepoI_Get_Call) Run(run func(ctx context.Context)) *CounterRepoI_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CounterRepoI_Get_Call) Return(_a0 int, _a1 error) *CounterRepoI_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CounterRepoI_Get_Call) RunAndReturn(run func(context.Context) (int, error)) *CounterRepoI_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, res
func (_m *CounterRepoI) Set(ctx context.Context, res int) error {
	ret := _m.Called(ctx, res)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CounterRepoI_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type CounterRepoI_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - res int
func (_e *CounterRepoI_Expecter) Set(ctx interface{}, res interface{}) *CounterRepoI_Set_Call {
	return &CounterRepoI_Set_Call{Call: _e.mock.On("Set", ctx, res)}
}

func (_c *CounterRepoI_Set_Call) Run(run func(ctx context.Context, res int)) *CounterRepoI_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *CounterRepoI_Set_Call) Return(_a0 error) *CounterRepoI_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CounterRepoI_Set_Call) RunAndReturn(run func(context.Context, int) error) *CounterRepoI_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewCounterRepoI creates a new instance of CounterRepoI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounterRepoI(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounterRepoI {
	mock := &CounterRepoI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
